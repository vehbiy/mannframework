@model List<GenerationResult>

@{
    List<GenerationResult> results = Model.Where(x => x.Status == OperationResultType.Success).ToList();
    int index = 1;
    string cssClass = "";
    GenerationResult res = results.FirstOrDefault();
    Item item = res != null ? res.Item : null;
    //Item item = null;
}

<div class="wrapper wrapper-content animated fadeIn">
    <div class="row">
        <div class="col-lg-12">
            @if ((int)UIStateManager.Instance.Project.GeneratorTypes == 0)
            {
                <div>@Html.EmptyMessage(GarciaLocalizationManager.Localize("NoGeneratorsDefinedInProject")) <a href="@Url.Action("Edit", "Project", new { @Id = Request.QueryString["ProjectId"] })">@Html.Localize("Click here to define")</a></div>
            }
            @if (UIStateManager.Instance.Project.SubProjects.Count == 0)
            {
                <div>@Html.EmptyMessage(GarciaLocalizationManager.Localize("NoSubProjects")) <a href="@Url.Action("List", "SubProject", new { @ProjectId = Request.QueryString["ProjectId"] })">@Html.Localize("Click here to add")</a></div>
            }
            else if (UIStateManager.Instance.Project.SubProjects.Count(x => x.ProjectType != 0) == 0)
            {
                <div>@Html.EmptyMessage(GarciaLocalizationManager.Localize("SubProjectsDontHaveProjectType")) <a href="@Url.Action("List", "SubProject", new { @ProjectId = Request.QueryString["ProjectId"] })">@Html.Localize("Click here to add")</a></div>
            }
            else
            {
                <div class="ibox float-e-margins">
                    <div class="ibox-title">
                        <h5>@ViewBag.PageTitle</h5>
                        <div class="ibox-tools">
                            @Html.LocalizedStyledActionLink("Edit Item", "Edit", "Item", new RouteValueDictionary { { "Id", Request.QueryString["Id"] } }, "Create")
                            @Html.LocalizedStyledActionLink("Item Properties", "List", "ItemProperty", new RouteValueDictionary { { "ItemId", Request.QueryString["Id"] } }, "Create")
                            @Html.LocalizedStyledActionLink("Project Items", "List", "Item", new RouteValueDictionary { { "ProjectId", UIStateManager.Instance.ProjectId } }, "Create")
                        </div>
                    </div>
                    <div class="ibox-content">
                        <div class="tabs-container">
                            <ul class="nav nav-tabs">
                                @*<li class="active"><a data-toggle="tab" href="#tab-1">Summary</a></li>*@
                                @foreach (GenerationResult result in results)
                                {
                                    cssClass = index == 1 ? "active" : "";

                                    @*<li class="@cssClass"><a data-toggle="tab" href="#tab-@index">@result.Generator.GetType().Name.Replace("Generator", "")</a></li>*@
                                    if (item != null)
                                    {
                                        <li class="@cssClass"><a data-toggle="tab" href="#tab-@index">@result.Generator.GetFileName(item)</a></li>
                                    }
                                    index++;
                                }
                            </ul>
                            <div class="tab-content">
                                @*<div id="tab-1" class="tab-pane active">
                                        <div class="panel-body">
                                            @foreach (GenerationResult result in Model)
                                            {
                                                <span>@result.Summary</span>
                                                <br/>
                                            }
                                        </div>
                                    </div>*@
                                @{ index = 1; }
                                @foreach (GenerationResult result in results)
                                {
                                    string contentType = "";

                                    switch (result.Generator.ContentType)
                                    {
                                        case GeneratorContentType.CSharp:
                                            contentType = "text/x-csharp";
                                            break;
                                        case GeneratorContentType.Html:
                                            contentType = "text/x-csharp";
                                            break;
                                        case GeneratorContentType.Sql:
                                            contentType = "text/x-sql";
                                            break;
                                        case GeneratorContentType.Javascript:
                                            contentType = "text/javascript";
                                            break;
                                        default:
                                            break;
                                    }

                                    cssClass = index == 1 ? "tab-pane active" : "tab-pane";

                                    <div id="tab-@index" class="@cssClass">
                                        <div class="panel-body">
                                            <textarea id="code-@index" class="code" mc-contenttype="@contentType">@result.Code</textarea>
                                            @{ index++; }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/plugins/codeEditorStyles")
}

@section Scripts {
    @Scripts.Render("~/plugins/codeEditor")
    @*@Scripts.Render("~/scripts/plugins/codemirror/addon/display/autorefresh.js")*@

    <script type="text/javascript">
        $(document).ready(function () {
            var textAreas = $('.code');
            for (i = 0; i < textAreas.length; i++) {
                var mode = textAreas[i].attributes["mc-contenttype"].value;
                var editor = CodeMirror.fromTextArea(textAreas[i], {
                    lineNumbers: true,
                    matchBrackets: true,
                    styleActiveLine: true,
                    readOnly: true,
                    autoRefresh: true,
                    mode: mode
                });
            }
        });
    </script>
}