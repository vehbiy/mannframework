using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using MannFramework.Factory;
using MannFramework.Interface;
using System.Collections;
using System.Collections.Specialized;
using System.Web;
using System.Web.Routing;
using System.Reflection;

namespace MannFramework
{
    public class MannFrameworkMvcController<L> : Controller, IMannFrameworkHttpController
        where L : struct
    {
        public IHttpResponseFactory HttpResponseMessageFactory { get; set; }
        public bool UseAutoGeneratedListView { get; set; }
        public bool AllowDeleteAll { get; set; }
        public bool AddDeleteAllLinkToListView { get; set; }

        public MannFrameworkMvcController()
        {
            this.HttpResponseMessageFactory = new HttpResponseFactory();
            this.UseAutoGeneratedListView = true;
        }

        [HttpGet]
        public virtual ActionResult Index()
        {
            return View();
        }

        protected virtual Dictionary<string, object> GetParametersFromQueryString<T>()
        {
            Dictionary<string, object> parameters = Request.QueryString.ToDictionary();
            PropertyInfo[] properties = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance);
            Dictionary<string, object> filteredParameters = new Dictionary<string, object>();

            foreach (var parameter in parameters)
            {
                if (properties.Count(x => x.Name == parameter.Key) > 0)
                {
                    filteredParameters.Add(parameter.Key, parameter.Value);
                }
            }

            Dictionary<string, object> routeValues = this.RouteData.Values.Where(x => x.Key.Contains("Id")).ToDictionary(x => x.Key, x => x.Value);

            foreach (var routeValue in routeValues)
            {
                if (!filteredParameters.ContainsKey((routeValue.Key)))
                {
                    filteredParameters.Add(routeValue.Key, routeValue.Value);
                }
            }

            return filteredParameters;
        }

        protected virtual void SetTitle()
        {
            string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
            string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
            ViewBag.Title = MannFrameworkLocalizationManager.Localize(new MannFrameworkStringBuilder("PageTitle.", controllerName).ToString().ToSplittedTitleCase());
        }

        protected void CheckSession()
        {
            bool success = this.InnerCheckSession();

            if (!success)
            {
                throw new HttpException(412, "");
            }
        }

        protected virtual bool InnerCheckSession()
        {
            return true;
        }

        protected virtual ActionResult RedirectToIndex(RouteValueDictionary routeValues = null)
        {
            return RedirectToAction("List", routeValues);
        }

        protected virtual ActionResult RedirectToHome(RouteValueDictionary routeValues = null)
        {
            return Redirect("~/");
        }
    }

    public class MannFrameworkMvcController<T, K, L> : MannFrameworkMvcController<L>
        where T : Entity<L>
        where K : BaseModel
        where L : struct
    {
        [HttpGet]
        public virtual ActionResult Index(L id)
        {
            this.CheckSession();
            this.SetTitle();
            MannFrameworkHttpResponseMessage<K> model = ModelHelper<L>.GetModel<T, K>(id);
            return View(model);
        }

        [HttpGet]
        public virtual ActionResult List()
        {
            this.CheckSession();
            this.SetTitle();
            ViewBag.AddDeleteAllLink = this.AddDeleteAllLinkToListView;
            MannFrameworkHttpResponseMessage<List<K>> models = ModelHelper<L>.GetModels<T, K>();
            return this.UseAutoGeneratedListView ? View("~/Views/Shared/List.cshtml", models) : View(models);
        }

        [HttpGet]
        public virtual ActionResult ListWithoutLayout()
        {
            ViewBag.DonotUseLayout = true;
            return List();
        }

        [HttpPost]
        public virtual ActionResult Save([System.Web.Http.FromBody]K model)
        {
            this.CheckSession();
            Entity item = model.InnerToEntity();
            MannFrameworkHttpResponseMessage result = null;

            if (item == null)
            {
                result = this.HttpResponseMessageFactory.GetResponseMessage(HttpStatusCode.NotFound);
            }
            else
            {
                OperationResult saveResult = EntityManager.Instance.Save(item as T);
                result = new MannFrameworkHttpResponseMessage(saveResult);
            }

            return Json(result);
        }

        [HttpDelete]
        public virtual ActionResult Delete(L id)
        {
            this.CheckSession();
            T entity = ModelHelper<L>.GetItem<T>(id);
            entity.IsMarkedForDeletion = true;
            OperationResult result = EntityManager.Instance.Save(entity);
            MannFrameworkHttpResponseMessage<K> response = new MannFrameworkHttpResponseMessage<K>(result);
            return Json(response);
        }
    }

    public class MannFrameworkMvcController : MannFrameworkMvcController<int>
    {
    }

    public class MannFrameworkMvcController<T, K> : MannFrameworkMvcController<T, K, int>
       where T : Entity<int>
       where K : BaseModel
    {
    }

    public class MannFrameworkEntityMvcController<T, L> : MannFrameworkMvcController<L>
        where T : Entity<L>
        where L : struct
    {
        [HttpGet]
        public virtual ActionResult Edit(L? id)
        {
            this.CheckSession();
            this.SetTitle();
            return this.GetModel(id);
        }

        [HttpGet]
        public virtual ActionResult Details(L? id)
        {
            this.CheckSession();
            this.SetTitle();
            return this.GetModel(id, "~/Views/Shared/Details.cshtml");
        }

        protected virtual ActionResult GetModel(L? id, string viewName = null)
        {
            T model = null;

            if (id.HasValue)
            {
                model = EntityManager<L>.Instance.GetItem<T>(id);
            }
            else
            {
                model = ObjectFactory.CreateObject<T>();
            }

            if (model == null)
            {
                return null;
            }

            Dictionary<string, object> parameters = this.GetParametersFromQueryString<T>();

            foreach (var parameter in parameters)
            {
                if (parameter.Key == "Id")
                {
                    continue;
                }

                try
                {
                    Helpers.SetPropertyValue(model, parameter.Key, parameter.Value);
                }
                catch (Exception)
                {
                    // TODO: log
                    throw;
                }
            }

            if (string.IsNullOrEmpty(viewName))
            {
                return View(model);
            }
            else
            {
                return View(viewName, model);
            }
        }

        /// <summary>
        /// Executes after a successful Edit post method call
        /// </summary>
        protected virtual void AfterEdit()
        {
        }

        /// <summary>
        /// Executes after a successful Delete post method call and calls PostEdit.
        /// </summary>
        protected virtual void AfterDelete()
        {
            this.AfterEdit();
        }

        [HttpPost]
        public virtual ActionResult Edit(T model)
        {
            this.CheckSession();

            if (ModelState.IsValid)
            {
                OperationResult saveResult = EntityManager.Instance.Save(model);

                if (saveResult.Success)
                {
                    RouteValueDictionary routeValues = new RouteValueDictionary();

                    if (Request.QueryString.Count != 0)
                    {
                        Dictionary<string, object> dictionary = Request.QueryString.ToDictionary();
                        IDictionaryEnumerator ienum = dictionary.GetEnumerator();

                        while (ienum.MoveNext())
                        {
                            string key = ienum.Key.ToString();
                            string keyToLower = key.ToLowerInvariant();

                            if (keyToLower != "id" && keyToLower != "ref")
                            {
                                routeValues.Add(key.ToString(), ienum.Value);
                            }
                        }
                    }

                    //return RedirectToAction("Index", routeValues);
                    this.AfterEdit();
                    return RedirectToAction("Back", "Account");
                    //return this.RedirectToIndex(routeValues);
                }
                else if (saveResult.ValidationResults != null && saveResult.ValidationResults.Count != 0 && !string.IsNullOrEmpty(saveResult.ValidationResults[0].PropertyName))
                {
                    ValidationResult validationResult = saveResult.ValidationResults[0];
                    ModelState.AddModelError(validationResult.PropertyName, saveResult.LocalizedValidationMessage);
                }
            }

            return View(model);
        }

        //[HttpGet]
        public virtual ActionResult List()
        {
            this.CheckSession();
            this.SetTitle();
            ViewBag.AddDeleteAllLink = this.AddDeleteAllLinkToListView;
            List<T> items = this.GetItems();
            return this.UseAutoGeneratedListView ? View("~/Views/Shared/List.cshtml", items) : View(items);
        }

        //[HttpGet]
        public virtual ActionResult ListWithoutLayout()
        {
            this.CheckSession();
            this.SetTitle();
            List<T> items = this.GetItems();
            ViewBag.DonotUseLayout = true;
            return View("~/Views/Shared/ListWithoutLayout.cshtml", items);
        }

        [HttpGet]
        public virtual ActionResult Delete(L id)
        {
            this.CheckSession();
            T item = EntityManager<L>.Instance.GetItem<T>(id);
            item.IsMarkedForDeletion = true;
            OperationResult result = EntityManager.Instance.Save(item);

            if (result.Success)
            {
                this.AfterDelete();
                return RedirectToAction("Back", "Account", new { count = 1 });
            }

            return View(item);
        }

        [HttpGet]
        public virtual ActionResult DeleteAll()
        {
            if (!this.AllowDeleteAll)
            {
                throw new UnauthorizedAccessException();
            }

            Dictionary<string, object> parameters = this.GetParametersFromQueryString<T>();
            List<T> items = this.GetItems();

            foreach (T item in items)
            {
                item.IsMarkedForDeletion = true;
                OperationResult result = EntityManager.Instance.Save(item);
            }

            this.AfterDelete();
            return RedirectToAction("Back", "Account", new { count = 1 });
        }

        protected virtual List<T> GetItems()
        {
            var routeValues = this.RouteData.Values.Where(x => x.Key.Contains("Id")).ToDictionary(x => x.Key, x => x.Value);
            Dictionary<string, object> parameters = new Dictionary<string, object>(routeValues);

            if (parameters.Count == 0)
            {
                parameters = this.GetParametersFromQueryString<T>();
            }

            List<T> items = EntityManager<L>.Instance.GetItems<T>(parameters);
            return items;
        }
    }

    public class MannFrameworkEntityMvcController<T> : MannFrameworkEntityMvcController<T, int>
        where T : Entity<int>
    {
    }
}
