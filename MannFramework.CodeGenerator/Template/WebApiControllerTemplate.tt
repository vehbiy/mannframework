<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#@ parameter type="System.Boolean" name="GenerateWebApiGetOne" #>
<#@ parameter type="System.Boolean" name="GenerateWebApiGetAll" #>
<#@ parameter type="System.Boolean" name="GenerateWebApiPost" #>
<#@ parameter type="System.Boolean" name="GenerateWebApiDelete" #>
<#@ parameter type="System.String" name="BaseWebApiControllerName" #>
<#@ parameter type="System.String" name="WebApiControllerNamespaceSuffix" #>
<#@ parameter type="System.String" name="WebApiModelNamespaceSuffix" #>
<#@ parameter type="System.Boolean" name="GenerateWebApiModel" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Includes" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>  
<#
	string itemName = Item.Name;
	string modelName = itemName;

	if (GenerateWebApiModel)
	{
		modelName += "Model";
	}

	string controllerName = itemName + "Controller";
	List<ItemProperty> properties = Item.Properties.Where(x => x.AccessorType == AccessorType.Public).ToList();
	string className = "public partial class " + itemName + "Controller : " + BaseWebApiControllerName + "<" + itemName;
	string modelParameterName = "item";
	
	if (GenerateWebApiModel)
	{
		className += (", " + modelName);
		modelParameterName = "model";
	}
	
	className += ">";
	Dictionary<string, int> generatedMethods = new Dictionary<string, int>();
#>
using System.Web.Http;
<#= Includes #>
namespace <#= Namespace #>
{
	<#= className #>
	{
<#if(GenerateWebApiGetOne) { #>
		public override MannFrameworkHttpResponseMessage<<#= modelName #>> Get(int id)
        {
            MannFrameworkHttpResponseMessage<<#= modelName #>> model = this.GetModel(id);
            return model;
        }

<#} #>
<#if(GenerateWebApiGetAll) { #>
		public override MannFrameworkHttpResponseMessage<List<<#= modelName #>>> Get()
        {
            MannFrameworkHttpResponseMessage<List<<#= modelName #>>> models = this.GetModels();
            return models;
        }

<#} #>
<#if(GenerateWebApiPost) { #>
		public override MannFrameworkHttpResponseMessage Post([FromBody]<#= modelName #> <#= modelParameterName #>)
        {
<#if(GenerateWebApiModel) { #>
            <#= itemName #> item = model.ToEntity();
<#} #>
            if (item == null)
            {
                return new MannFrameworkHttpResponseMessage(System.Net.HttpStatusCode.NotFound);
            }

            OperationResult saveResult = EntityManager.Instance.Save(item);
            return new MannFrameworkHttpResponseMessage(saveResult);
        }

<#} #>
<#if(GenerateWebApiDelete) { #>
		public override MannFrameworkHttpResponseMessage<<#= modelName #>> Delete(int id)
        {
            <#= itemName #> entity = EntityManager.Instance.GetItem <<#= itemName #>>(id);
            entity.IsMarkedForDeletion = true;
            OperationResult result = EntityManager.Instance.Save(entity);
            return new MannFrameworkHttpResponseMessage<<#= modelName #>>(result);
        }
<#} #>
<# 
if (!GenerateWebApiModel)
{
	Action<Item, string, List<Item>, List<ItemProperty>> IterateThroughChildren = null; 
    IterateThroughChildren = delegate(Item item, string basePath, List<Item> items, List<ItemProperty> parameterProperties)
    {
		List<ItemProperty> innerProperties = item.Properties.Where(x => x.AccessorType == AccessorType.Public).ToList();
		string innerItemName = item.Name;
		string path = "api/";
		
		foreach (ItemProperty property in innerProperties.Where(x => x.Type == ItemPropertyType.Class && x.MappingType == ItemPropertyMappingType.List))
		{
			string innerTypeName = this.generator.GetInnerTypeName(property); 
			basePath = basePath + "/";
			string parameters = "";
			string parameter = "";
			string parameterName = "";
			int counter = 0;
			List<string> parameterNames = new List<string>();

			foreach(Item tempItem in items)
			{
				path += tempItem.Name + "/";

				if (counter == 0)
				{
					parameter = ("int id");
					parameterName = "{id}";
					// parameterNames.Add("id");
				}
				else
				{
					parameter = (", int " + tempItem.Name.ToPascalCase() + "Id");
					parameterName = "{" + tempItem.Name.ToPascalCase() + "Id}";
					parameterNames.Add(tempItem.Name.ToPascalCase() + "Id");
				}

				parameters += parameter;
				path += parameterName + "/";
				counter++;
			}

			// path += item.Name + "/";
			path += item.Name + "/" + property.Name + "/";

			if (counter == 0)
			{
				parameter = ("int id");
				parameterName = "{id}";
				// parameterNames.Add("id");
			}
			else
			{
				parameter = (", int " + item.Name.ToPascalCase() + "Id");
				parameterName = "{" + item.Name.ToPascalCase() + "Id}";
				parameterNames.Add(item.Name.ToPascalCase() + "Id");
			}

			parameters += parameter;
			path += parameterName + "/";
			string methodName = GetMethodName(generatedMethods, "Get" + property.Name);
#>
		[Route("<#= path #>")]
		public MannFrameworkHttpResponseMessage<<#= innerTypeName #>> <#= methodName #>(<#= parameters #>)
		{
<# if (items.Count != 0) { #>
			<#= items[0].Name #> entity = EntityManager.Instance.GetItem<<#= items[0].Name #>>(id);
<# 
			string name = "";
			string name2 = "";
			counter = 0;

			foreach (Item innerItem in items)
			{
				if (counter == 0)
				{
					continue;
				}

				name += innerItem.Name + ".";
				counter++;
			}

			name += item.Name + "?." + property.Name;
			counter = 0;

			foreach (ItemProperty innerProperty in parameterProperties)
			{
				// name2 += innerProperty.Name + ".Single(x => x.Id == " + parameterName.Trim('{').Trim('}') + ").";
				name2 += innerProperty.Name + "?.FirstOrDefault(x => x.Id == " + parameterNames[counter] + ")?.";
				counter++;
			}

			name2 += property.Name;
#>
			MannFrameworkHttpResponseMessage<<#= innerTypeName #>> item = new MannFrameworkHttpResponseMessage<<#= innerTypeName #>>(entity.<#= name2 #>);
<# } else { #>
			<#= innerItemName #> entity = EntityManager.Instance.GetItem<<#= innerItemName #>>(id);
			MannFrameworkHttpResponseMessage<<#= innerTypeName #>> item = new MannFrameworkHttpResponseMessage<<#= innerTypeName #>>(entity.<#= property.Name #>);
<# } #>
			return item;
		}

<# 
			if (property.InnerType != null)
			{
				basePath += (item.Name + "/{id}");
				items.Add(item);
				parameterProperties.Add(property);
				IterateThroughChildren(property.InnerType, basePath, items, parameterProperties);
			}
		}
	};

	IterateThroughChildren(Item, "", new List<Item>() {}, new List<ItemProperty>() {} );
}

#>
	}
}

<#+
	protected override Generator CreateGenerator()
	{
		return new WebApiControllerGenerator();
	}

	protected string GetMethodName(Dictionary<string, int> generatedMethods, string methodName)
	{
		if (generatedMethods.ContainsKey(methodName))
		{
			generatedMethods[methodName]++;
			return methodName + "_" + generatedMethods[methodName].ToString();
		}
		else
		{
			generatedMethods.Add(methodName, 0);
			return methodName;
		}
	}
#>
