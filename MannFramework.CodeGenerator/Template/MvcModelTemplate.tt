<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#@ parameter type="System.String" name="BaseClass" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>  

namespace <#= Namespace #>
{
	public partial class <#= Item.Name #>Model : <#= BaseClass #>
	{
<# 
		foreach (var property in Item.Properties)
		{
			string innerTypeName = this.generator.GetInnerTypeName(property); 
#>
		public <#= innerTypeName #> <#= property.Name #> { get; set; }
<# 
		} 
#>

		public <#= Item.Name #>Model()
		{
<# 
			foreach (var property in Item.Properties)
			{
				string innerTypeName = this.generator.GetInnerTypeName(property);
				
				switch (property.MappingType)
                {
                    case ItemPropertyMappingType.Property:
                        break;
                    case ItemPropertyMappingType.List: 
#>
			this.<#= property.Name #> = new <#= innerTypeName #> ();
<#						break;
                    case ItemPropertyMappingType.Array:
                        // TODO
                        break;
                }
			} 
#>
		}
	}
}

<#+
	protected override Generator CreateGenerator()
	{
		return new WebApiModelGenerator();
	}
#>
