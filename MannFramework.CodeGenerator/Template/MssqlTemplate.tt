<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework.CodeGenerator" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#@ parameter type="System.Boolean" name="GenerateForeignKeyConstraint" #>
<#@ parameter type="System.Boolean" name="GenerateStoredProcedures" #>
<#@ parameter type="System.Boolean" name="UseInsertTime" #>
<#@ parameter type="System.Boolean" name="UseDeleteTime" #>

create table <#= Item.Name #>
(
	[Id] int primary key identity (1, 1),
<#	if (UseInsertTime)
	{
#>
	[InsertTime] datetime not null default (getdate()),
<#
	}
	if (UseDeleteTime)
	{
#>
	[DeleteTime] datetime,
<#
	}

	int index = -1;
	List<ItemProperty> properties = Item.Properties.Where(x => x.MappingType == ItemPropertyMappingType.Property).ToList();
	string alterCommands = "";
	string alterAddCommands = "";

	foreach (var property in properties)
	{
		index++;
		string columnType = this.generator.GetInnerTypeName(property); 
		string columnName = "[" + property.Name;

		if (property.Type == ItemPropertyType.Class)
		{
			columnName = columnName + "Id";

			if (GenerateForeignKeyConstraint)
			{
				string propertyName = property.InnerType != null ? property.InnerType.Name : property.Name;
				columnType += " foreign key references " + propertyName + "(Id)";
			}
		}

		columnName += "]";
		alterAddCommands += "alter table " + Item.Name + " add " + columnName + " " + columnType + "\n" ;
		alterCommands += "alter table " + Item.Name + " alter column " + columnName + " " + columnType + "\n" ;
#>
	<#= columnName #> <#= columnType #><# if (index != properties.Count - 1){#>,
<#}
	}
#>

)
go

<#= alterAddCommands #>

<#= alterCommands #>

<#
	if (GenerateStoredProcedures)
	{
	}
#>

<#+
	protected override Generator CreateGenerator()
	{
		return new MssqlGenerator();
	}
#>