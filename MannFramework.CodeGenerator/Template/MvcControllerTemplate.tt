<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="System.Web.Mvc" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#@ parameter type="System.Boolean" name="GenerateGetOne" #>
<#@ parameter type="System.Boolean" name="GenerateGetAll" #>
<#@ parameter type="System.Boolean" name="GeneratePost" #>
<#@ parameter type="System.Boolean" name="GenerateDelete" #>
<#@ parameter type="System.Boolean" name="GenerateInnerGet" #>
<#@ parameter type="System.String" name="BaseMvcControllerName" #>
<#@ parameter type="System.Boolean" name="GenerateMvcModel" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Includes" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>  
<#
	string itemName = Item.Name;
	string modelName = itemName;

	if (GenerateMvcModel)
	{
		modelName += "Model";
	}

	string controllerName = itemName + "Controller";
	string listMethod = "";
	string getOneMethod = "";
	string postMethod = "";
	string deleteMethod = "";

	if (GenerateMvcModel)
	{
		listMethod = "MannFrameworkHttpResponseMessage<List<" + modelName + ">> models = this.GetModels();";
		getOneMethod = "MannFrameworkHttpResponseMessage<" + modelName + "> model = this.GetModel(id);";
	}
	else
	{
		listMethod = "List<" + modelName + "> models = EntityManager.Instance.GetItems<" + modelName + ">();";
		getOneMethod = modelName + " model = EntityManager.Instance.GetItem<" + modelName + ">(id);";
	}

	string className = "public partial class " + itemName + "Controller : " + BaseMvcControllerName + "<" + itemName;
	
	if (GenerateMvcModel)
	{
		className += (", " + modelName);
	}
	
	className += ">";
#>
using System.Web.Mvc;
<#= Includes #>
namespace <#= Namespace #>
{
	<#= className #>
	{
<#if(GenerateGetOne) { #>
		[HttpGet]
		public override ActionResult Edit(int id)
        {
            <#= getOneMethod #>
            return View(model);
        }

<#} #>
<#if(GenerateGetAll) { #>
		[HttpGet]
		public override ActionResult Index()
        {
            <#= listMethod #>
            return View(models);
        }

<#} #>
<#if(GeneratePost) { #>
		[HttpPost]
		public override ActionResult Edit(<#= modelName #> model)
        {
			if (ModelState.IsValid)
            {
<#if(GenerateMvcModel) { #>
				<#= itemName #> item = model.ToEntity();

				if (item == null)
				{
					return new MannFrameworkHttpResponseMessage(System.Net.HttpStatusCode.NotFound);
				}

				OperationResult saveResult = EntityManager.Instance.Save(item);
				
				if (saveResult.Success)
                {
                    return RedirectToAction("Index");
                }
<#} else { #>
                OperationResult saveResult = EntityManager.Instance.Save(model);

                if (saveResult.Success)
                {
                    return RedirectToAction("Index");
                }
<#} #>
			}

            return View(model);
        }

<#} #>
<#if(GenerateDelete) { #>
		[HttpDelete]
		public override MannFrameworkHttpResponseMessage<<#= modelName #>> Delete(int id)
        {
            <#= itemName #> item = EntityManager.Instance.GetItem<<#= itemName #>>(id);
            item.IsMarkedForDeletion = true;
            OperationResult result = EntityManager.Instance.Save(item);
            return new MannFrameworkHttpResponseMessage<<#= modelName #>>(result);
        }

<#} #>
<#if(GenerateInnerGet) {
		foreach (var property in Item.Properties)
		{
			if (property.InnerType == null)
			{
				continue;
			}

			string innerTypeName = this.generator.GetInnerTypeName(property); 

			switch (property.MappingType)
            {
                case ItemPropertyMappingType.Property: 
                    break;
                case ItemPropertyMappingType.List: #>
		
		[HttpGet]
		public MannFrameworkHttpResponseMessage<List<<#=property.InnerType.Name#>Model>> <#=property.Name#>(int id)
		{
			MannFrameworkHttpResponseMessage<<#= modelName #>> model = this.GetModel(id);
			List<<#=property.InnerType.Name#>Model> models = ModelBase.GetModels<<#=property.InnerType.Name#>, <#=property.InnerType.Name#>Model>(<#=property.Name#>);
			return models;
		}
<#
					break;
                case ItemPropertyMappingType.Array:
                    // TODO
                    break;
            }
		}
} #>
	}
}

<#+
	protected override Generator CreateGenerator()
	{
		return new WebApiControllerGenerator();
	}
#>
