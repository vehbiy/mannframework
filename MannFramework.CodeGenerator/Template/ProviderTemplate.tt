<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#@ parameter type="System.Boolean" name="EnableCaching" #>
<#@ parameter type="System.Boolean" name="GenerateCreateEntity" #>
<#@ parameter type="System.Boolean" name="GenerateInitializeEntity" #>
<#@ parameter type="System.Boolean" name="GenerateGetCommonParameters" #>
<#@ parameter type="System.Boolean" name="UseAlias" #>
<#@ parameter type="System.String" name="BaseClass" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>  

namespace <#= Namespace #>
{
	[Serializable]
	public partial class <#= Item.Name #>Provider : <#= BaseClass #><<#= Item.Name #>, <#= Item.Name #>Provider>
	{
		public <#= Item.Name #>Provider()
		{
			this.EnableCaching = <#= EnableCaching.ToString().ToLower() #>;
		}
<#if(GenerateCreateEntity) { #>
		
		protected override Entity<int> CreateEntity(Dictionary<string, object> dataItem, Type entityType)
        {
            return new <#= Item.Name #>();
        }
<#} #>
<#if(GenerateInitializeEntity) { #>

		protected override void InitializeEntity(<#= Item.Name #> entity, Dictionary<string, object> values, bool useAlias)
        {
<# if (this.UseAlias) { #>
			entity.Id = values.GetValue<int>("<#= Item.Name #>.Id");
			entity.InsertTime = values.GetValue<DateTime>("<#= Item.Name #>.InsertTime");
<# } #>
<# else { #>
			base.InitializeEntity(entity, values);
<# } #>
<#
			foreach (var property in Item.Properties)
			{
				string innerTypeName = this.generator.GetInnerTypeName(property);
				string initializeCode = this.GetInitializeCode(Item, property);
#>
			entity.<#= property.Name #> = <#= initializeCode #>;
<#
			} 
#>
		}
<#} #>
<#if(GenerateGetCommonParameters) { #>

		protected override Dictionary<string, object> GetCommonParameters(<#= Item.Name #> entity)
        {
            Dictionary<string, object> parameters = base.GetCommonParameters(entity);
<#
			foreach (var property in Item.Properties)
			{
				string innerTypeName = this.generator.GetInnerTypeName(property);
				string commonParameterCode = this.GetCommonParameterCode(Item, property);
#>
			<#= commonParameterCode #>;
<#
			} 
#>
            return parameters;
        }
<#} #>
	}
}

<#+
	protected override Generator CreateGenerator()
	{
		return new EntityGenerator();
	}

	protected string GetInitializeCode(Item item, ItemProperty property)
    {
        string text = "";
		string innerType = this.generator.GetInnerTypeName(property);
		string propertyName = property.Name;

		if(this.UseAlias)
		{
			propertyName = item.Name + "." + propertyName;
		}

        switch (property.MappingType)
        {
            case ItemPropertyMappingType.Property:
				if (property.Type == ItemPropertyType.Class)
                {
					string getValuesCode = "values.GetValue<int>(\"" + propertyName + "Id\")";
					text = "EntityManager.Instance.GetItem<" + innerType + ">(" + getValuesCode + ")"; 
				}
				else
				{
					text = "values.GetValue<" + innerType + ">(\"" + propertyName + "\")";
				}
				break;
			case ItemPropertyMappingType.List:
				string itemName = item.Name;
				
				if(this.UseAlias)
				{
					itemName = item.Name + "." + itemName;
				}

                text = "EntityManager.Instance.GetItems<" + innerType + ">(\"" + itemName + "Id\", Entity.Id)"; 
                break;
            case ItemPropertyMappingType.Array:
                // TODO
                break;
			default:
				break;
        }

        return text;
    }

	protected string GetCommonParameterCode(Item item, ItemProperty property)
	{
		return "// TODO";
	}
#>
