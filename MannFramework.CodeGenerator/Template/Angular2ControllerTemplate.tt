<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MannFramework" #>
<#@ import namespace="MannFramework.CodeGenerator" #>
<#@ import namespace="MannFramework.Application" #>
<#@ parameter type="MannFramework.Application.Item" name="Item" #>
<#
	List<string> fields = new List<string>();
	string itemName = Item.Name;
	string controllerName = itemName + "Ctrl";
	List<ItemProperty> properties = Item.Properties.Where(x => !x.MvcIgnore && x.AddOnChange).ToList();
	// List<ItemProperty> properties = Item.Properties.Where(x => !x.MvcIgnore).ToList();
	int counter = 0;
	string initCall = "";
#>
App.controller("<#= controllerName #>", ["$scope", "$rootScope", "$timeout", <#= controllerName #>])

function <#= controllerName #>($scope, $rootScope, $timeout) {
    window.gr = $scope;

	$scope.model = {
<# foreach (var property in properties) 
{
	string propertyName = property.Name;

	if (property.MappingType == ItemPropertyMappingType.Property && property.InnerType != null) 
	{ 
		propertyName += "Id";
	}
#>
		<#= propertyName #>OnChange = function () {
<# if (property.MappingType == ItemPropertyMappingType.Property && property.InnerType != null) { #>
			$scope.Init<#= propertyName #>();
<#} #>
		}
<#} #>
	}

<# foreach (var property in properties.Where(x => x.MappingType == ItemPropertyMappingType.Property && x.InnerType != null)) 
{
	string propertyName = property.Name;

	if (property.MappingType == ItemPropertyMappingType.Property && property.InnerType != null) 
	{ 
		propertyName += "Id";
	}
#>
	$scope.Init<#= propertyName #> = function () {
	}
<# 
	initCall += ("$scope.Init" + propertyName + "();\n"); 
#>
<#} #>
<#
	initCall = initCall.TrimEnd('\n');
#>

	$scope.InitEdit = function () {
		$timeout(function () {
			<#= initCall #>
		});
    }

    $scope.InitList = function () {
		$timeout(function () {
		});
    }
}
<#+
	protected override Generator CreateGenerator()
	{
		return new Angular2ControllerGenerator();
	}
#>
